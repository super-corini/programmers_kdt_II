{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Day5.md",
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPQML+ULLICdJ9E/MdtF51K",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Zzang-yeah/programmers_kdt_II/blob/week4/Day5_md\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w_kyqZ0nqcrq"
      },
      "source": [
        "#Mission 1. My New Assistant\n",
        "서울에 사는 호주니는 영화 <브론즈 맨>을 보고 감동을 받았다. 특히 브론즈 맨 슈트를 장착했을 때 나오는 어시스턴트 빅수비의 성능에 금치 못했다. 이를 통해 우리의 매일매일의 생활을 윤택하게 만들어 줄 나만의 빅수비를 만들어보면 좋겠다는 생각을 했다. 호주니를 도와 한국형 자비스, 빅수비를 만들어보자.\n",
        "##Core Mission\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "* 제출할 파일 : bicsubi_core_api.md , API 구축에 사용되는 파일들\n",
        "\n",
        "* 다음의 명세에 맞게 API를 작성합니다.\n",
        "\n",
        "> * GET /whoami\n",
        "\n",
        ">> * 여러분의 github id를 반환합니다.\n",
        ">> * Example:\n",
        "{\n",
        "    \"name\" : \"super-corini\"\n",
        "}\n",
        "\n",
        "> * GET /echo?string=\"string\"\n",
        "\n",
        ">> * Query String : string\n",
        ">> * string 을 반환합니다.\n",
        "{\n",
        "   \"value\" : \"string\"\n",
        "}\n",
        "\n",
        "* 다음의 요구사항에 맞게 API를 설계하고 작성합니다.\n",
        "\n",
        "> * 빅수비는 자원 weapon 을 가집니다. 이 weapon 은 이름(name : str)과 수량(stock : int)을 가지며 각각에 대해 Create, Read, Update, Delete를 진행할 수 있습니다.\n",
        "\n",
        ">> * Create : 새로운 weapon 을 추가\n",
        ">>* Read : 현재 존재하는 weapon 을 확인\n",
        ">> * Update : 현재 존재하는 weapon 에서 특정 속성(이름, 수량)을 변경\n",
        ">> * Delete : 현재 존재하는 특정 weapon 을 삭제    \n",
        "\n",
        "* 작성한 API에 대한 명세(API Docs)를 bicsubi_core_api.md 에 작성하여 제출합니다.\n",
        "\n",
        "* 모든 API는 작성자가 설계한대로 원활하게 동작되어야합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7taiPi1kuFhc"
      },
      "source": [
        "from flask import Flask, jsonify, request\n",
        "\n",
        "app=Flask(__name__)\n",
        "\n",
        "weapon=[]\n",
        "\n",
        "#'/whoami'주소를 입력받았을 때 아래에 있는 함수를 실행\n",
        "@app.route('/whoami')\n",
        "def who_am_i():\n",
        "    return jsonify({'name':\"zzang-yeah\"})\n",
        "\n",
        "#GET/echo?string='string' : 자료를 가지고 온다.\n",
        "@app.route('/')\n",
        "def return_string():\n",
        "  value=request.args.get(\"s\",\"nothing\",str)\n",
        "  return jsonify({\"value\":value})\n",
        "\n",
        "#GET/weapon' : 자료를 가지고 온다.\n",
        "@app.route('/read')\n",
        "def read_weapon():\n",
        "  return jsonify(weapon)\n",
        "\n",
        "#POST/create_weapon : 자료를 자원에 추가한다.\n",
        "@app.route('/create', methods=['POST'])\n",
        "def create_weapon():\n",
        "  #전달받은 자료를 menus자원에 추가\n",
        "  request_data=request.get_json() #{\"name\":..., \"price\":...}\n",
        "  new_id=len(weapon)\n",
        "  new_weapon={\n",
        "      'name':request_data['name'],\n",
        "      \"stock\":request_data['stock'],\n",
        "  }\n",
        "  weapon.append(new_weapon)\n",
        "  return jsonify()\n",
        "\n",
        "#PUT /update_weapon/echo?string=\"string\" : 해당하는 name에 해당하는 데이터를 갱신합니다.\n",
        "@app.route('/update/<string:id>', methods=['PUT'])\n",
        "def update_weapon(id):\n",
        "  request_data=request.get_json()\n",
        "  for i in weapon:\n",
        "    if i['name']==id:\n",
        "      i['name']=request_data['name']\n",
        "      i['stock']=request_data['stock']\n",
        "      return jsonify(i)\n",
        "  return '없지롱'\n",
        "\n",
        "#DELETE /delete_weapon/echo?string=\"string\": 해당하는 name에 해당하는 데이터를 삭제합니다.\n",
        "@app.route('/delete/<string:id>',methods=['DELETE'])\n",
        "def delete_weapon(id):\n",
        "    request_data=request.get_json()\n",
        "    #value=request.args.get(\"s\",\"nothing\",str)\n",
        "    for i in weapon:\n",
        "        if i['name']==id:\n",
        "            return jsonify(weapon.pop(i))\n",
        "    return '없지롱'\n",
        "\n",
        "#name space가 main인 경우 즉, app.py를 직접적으로 실행한 경우 app.run()을 실행\n",
        "#app이 모듈로써가 아니라 직접적인 실행파일로 실행될 때 해당 로직을 사용\n",
        "if __name__=='__main__':\n",
        "    app.run()\n",
        "    app = Flask(__name__)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}